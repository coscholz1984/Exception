// main global script file

int ButtonArray1[5];
export ButtonArray1;

// called when the game starts, before the first room is loaded
function game_start()
{
  // register a GUI to use for the inventory bar
  TwoClickHandler.InventoryGUI = gInventoryBar;

  // register a Label to use for action text
  TwoClickHandler.ActionLabel = lblAction;

  // optionally set the popup distance for the inventory bar
  //TwoClickHandler.PopupProportional = 0.5;
  //TwoClickHandler.PopupDistance = 50;

  // optionally reverse the left and right mouse buttons
  //TwoClickHandler.ReversedClicks = true;
  
  // Parameters for speech bubble
  SpeechBubble.BorderColor = Game.GetColorFromRGB(0,128,0);
  SpeechBubble.BackgroundColor = Game.GetColorFromRGB(128,255,128);
  SpeechBubble.BackgroundTransparency = 33;
  SpeechBubble.PaddingTop = 5;
  SpeechBubble.PaddingBottom = 5;
  SpeechBubble.PaddingLeft = 15;
  SpeechBubble.PaddingRight = 15;
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// open a GUI
function open_gui(GUI* gui_to_open)
{
  TwoClickHandler.Close();
  mouse.UseModeGraphic(eModeWalkto);
  gui_to_open.Visible = true;
}

// hide a GUI
function close_gui(GUI *gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else if (gRestoreGame.Visible)
    {
      close_gui(gRestoreGame);
    }
    else if (gSaveGame.Visible)
    {
      close_gui(gSaveGame);
    }
    else
    {
      // Escape will prompt to exit the game
      open_gui(gExitGame);
    }
  }
  else if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will open the save game dialog
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will open the restore game dialog
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by TwoClickHandler script
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I don't want to have it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnExitGame_OnClick(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }

  // find first free save slot, starting with slot 1
  i = 1;

  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }

    i ++;
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

// helper function for modulo operation
function modulo(int a, int b)
{
  return a - ((a/b)*b);
}

function display_achievement(int iAchieve, const string tAchieve)
{
  bool bAchieve = false;
  if (iAchieve == 0)
  {
    bAchieve = bNewspaper;
    bNewspaper = true;
  }
  if (iAchieve == 1)
  {
    bAchieve = bEzekiel;
    bEzekiel = true;
  }
  if (iAchieve == 2)
  {
    bAchieve = bBrochures;
    bBrochures = true;
  }
  if (iAchieve == 3)
  {
    bAchieve = bCradle;
    bCradle = true;
  }
  if (iAchieve == 4)
  {
    bAchieve = bSign;
    bSign = true;
  }
  if (!bAchieve)
  {
  gAchievement.Transparency = 100;
  lAchievement.Text = tAchieve;
  gAchievement.Visible = true;
  int trans = gAchievement.Transparency;
    while (trans > 0) {
      trans = trans - 1;
      gAchievement.Transparency = trans;
      Wait(1);
    }
    while (trans < 100) {
      trans = trans + 2;
      gAchievement.Transparency = trans;
      Wait(1);
    }
  gAchievement.Visible = false;
  }
}

function iBook_Look()
{
  if (player == cRoger)
  {
    player.Say("My journal. My documentation of the contact experiment.");
  }
  if (player == cFiona)
  {
    player.Say("That must be his journal. I should send a copy to the institute.");
  }  
}

function iKey_Look()
{
  player.Say("The key to room 11.");
}

function gNewspaper_OnClick(GUI *theGui, MouseButton button)
{
  gNewspaper.Visible = false;
}

function NPquit_OnClick(GUIControl *control, MouseButton button)
{
  gNewspaper.Visible = false;
  display_achievement(0, "Achievement: The real world...");
}

function btnPresident_OnClick(GUIControl *control, MouseButton button)
{
  cRoger.Say("Hm. Bad news, not sure if she can turn it around.");
}

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  show_save_game_dialog();
}

function btnClose_OnClick(GUIControl *control, MouseButton button)
{
  gChapter.Visible = false;
}

function btnChapter1_OnClick(GUIControl *control, MouseButton button)
{
  cRoger.SetAsPlayer();
  player.ChangeRoom(1, 180, 150);
  FadeOut(5);
  gBlack.Visible = true;
  gChapter.Visible = false;
}

function btnChapter2_OnClick(GUIControl *control, MouseButton button)
{
  cFiona.SetAsPlayer();
  player.ChangeRoom(8, 106, 260);
  FadeOut(5);
  gBlack.Visible = true;
  gChapter.Visible = false;
}

function cGuy_Talk()
{
  player.Say("Talking to this guy is a waste of time.");
  //cGuy.Say("Don't waste my time with small talk.");
}

function cGuy_Look()
{
  player.Say("That's the owner.");
}

function iBlacklight_Look()
{
  player.Say("A black light.");
  player.Say("Just in case I need to hunt for ghosts, according to Henk.");
}

function gInput_OnActivate(GUIControl *control)
{
  if (gList.ItemCount > 14)
  {
    gList.RemoveItem(0);
    gList.RemoveItem(1);
  }
  switch (gInput.Text)
  {
    case "HELP":
      gList.AddItem("Available commands:");
      gList.AddItem("DIR, CLC, ATT, MAIL, HELP");
      break;
    case "DIR":
      gList.AddItem("#1 scan-100298.pdf   PDF-file   78kB");
      gList.AddItem("#2 scan-110298.pdf   PDF-file   51kB");
      gList.AddItem("#3 scan-140298.pdf   PDF-file   96kB");
      break;
    case "ATT":
      gList.AddItem("Attach command must be followed");
      gList.AddItem("by file no.");
      //bAttach = true;
      break;
    case "ATT 1":
      gList.AddItem("Attaching file #1.");
      break;
    case "ATT 2":
      gList.AddItem("Attaching file #2.");
      break;
    case "ATT 3":
      gList.AddItem("Attaching file #3.");
      bAttach = true;
      break;
    case "MAIL":
      if (bAttach)
      {
        gList.AddItem("Sending mail.");
        Wait(40);
        gTerminal.Visible = false;
        Wait(40);
        player.FaceDirection(eDirectionDown);
        player.Say("Okay, I've send the scans to the institute.");
        player.Say("Let's see what they can find.");
        Wait(40);
        FadeOut(1);
        gBlack.Visible = true;
        player.ChangeRoom(11, 0, -100);
      }
      else
      {
        player.Say("Hm. I don't think I attached the right scans yet.");
      }
      break;
    case "CLC":
      gList.Clear();
      break;
    case "QUIT":
      gTerminal.Visible = false;
      break;
    default:
      gList.AddItem(gInput.Text);
      gList.AddItem("Failed command or syntax error.");
      break;
  }
  gInput.Text = "";
}

function iRemote_Look()
{
  if (player == cWhite)
  {
    player.Say("JSKK973924S");
  }
  else
  {
    player.Say("A TV remote control.");
  }
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  show_restore_game_dialog();
}

function iTornPages_Look()
{
  gTornPages.Visible = true;
  gInventoryBar.Visible = false;
  cRoger.Say("A few pages from the book of Ezekiel.");
  cRoger.Say("This cannot be a coincidence.");
  cRoger.Say("They must have encountered them.");
  cRoger.Say("I assume that a few thousand years ago, they still had some energy left.");
  cRoger.Say("Following Ezekiel's description, they were very close to being revived.");
}

function gTornPages_OnClick(GUI *theGui, MouseButton button)
{
  gTornPages.BackgroundGraphic = 194 + modulo((gTornPages.BackgroundGraphic-194+1),4);
}

function btnPagesExit_OnClick(GUIControl *control, MouseButton button)
{
  gTornPages.Visible = false;
  display_achievement(1, "Achievement: A very bad omen.");
}

function btnChapter3_OnClick(GUIControl *control, MouseButton button)
{
  cHenk.SetAsPlayer();
  player.ChangeRoom(12, 107, 151);
  FadeOut(5);
  gBlack.Visible = true;
  gChapter.Visible = false;
}

function cBob_Talk()
{
  player.Walk(cBob.x-25, cBob.y, eBlock);
  player.FaceCharacter(cBob, eBlock);
  if (bMail == false)
  {
    player.Say("Hi Beth.");
    cBob.FaceCharacter(player);
    cBob.Say("Hey Henk, what's up?");
    cBob.Say("I'm pretty busy right now.");
    cBob.Say("But let me know if you need help.");
    player.Say("Thanks. Good luck with your work.");
    cBob.FaceDirection(eDirectionUp);
    cBob.Animate(0, 1 , eRepeat, eNoBlock);
    return;
  } 
  if (bServer == false)
  {
    player.Say("Hi Beth. There is an issue with the OCR service again.");
    cBob.FaceCharacter(player);
    cBob.Say("Yeah, you need to reset the server.");
    cBob.Say("Push the top button, the lower button, the middle button twice and then the top button again.");
    cBob.Say("That works... most of the time.");
    player.Say("Thanks, I'll give it a try.");
    cBob.FaceDirection(eDirectionUp);
    cBob.Animate(0, 1 , eRepeat, eNoBlock);
    return;
  }
  if (bForce == false)
  {
    player.Say("Hey Beth. The service still fails. It just seems to time out.");
    cBob.FaceCharacter(player);
    cBob.Say("There is a method to fix these kinds of problems, but it is a bit dangerous.");
    player.Say("Dangerous?");
    cBob.Say("For the server...");
    cBob.Say("Take the mop and hit it a few times.");
    player.Say("Er. Okay.");
    cBob.FaceDirection(eDirectionUp);
    cBob.Animate(0, 1 , eRepeat, eNoBlock);
  }
  if ((bForce == true) & (bServer == true) & (bMail == true))
  {
    player.Say("Hi Beth.");
    cBob.FaceCharacter(player);
    player.Say("I fixed the server.");
    player.Say("Indeed, it required a bit of force.");
    cBob.Say("It usually does...");
    cBob.FaceDirection(eDirectionUp);
    cBob.Animate(0, 1 , eRepeat, eNoBlock);
  }
}

function cBob_Look()
{
  player.FaceCharacter(cBob, eBlock);
  player.Say("It's Beth, she's always busy.");
}

function btnChapter4_OnClick(GUIControl *control, MouseButton button)
{
  cFiona.SetAsPlayer();
  player.ChangeRoom(15, 162, 160);
  player.FaceDirection(eDirectionDown);
  FadeOut(5);
  gBlack.Visible = true;
  gChapter.Visible = false;
}

function iRod_Look()
{
  player.Say("A metal rod.");
}

function iRodSlime_Look()
{
  player.Say("A metal rod with some goo.");
}

function btnNext_OnClick(GUIControl *control, MouseButton button)
{
  tContent.Text = "";
  tPerson.Text = "";
  if (player.Room == 7)
  {
    cFiona.ChangeRoom(8, 106, 260);
    FadeOut(3);
    gBlack.Visible = true;
    cFiona.SetAsPlayer();
  }
  if (player.Room == 11)
  {
    cHenk.ChangeRoom(12, 107, 151);
    FadeOut(3);
    gBlack.Visible = true;
    cHenk.SetAsPlayer();
  }
  if (player.Room == 14)
  {
    cFiona.ChangeRoom(15, 162, 160);
    cFiona.FaceDirection(eDirectionDown);
    FadeOut(3);
    gBlack.Visible = true;
    cFiona.SetAsPlayer();
  }
  btnNext.Visible = false;
}
